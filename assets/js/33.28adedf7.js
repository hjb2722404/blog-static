(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{197:function(_,v,n){"use strict";n.r(v);var t=n(0),p=Object(t.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var _=this,v=_.$createElement,n=_._self._c||v;return n("div",{staticClass:"content"},[n("p",[_._v("1、只有“bx、si、di、  bp”四个寄存器可以用在[…]中来进行内存单元的寻址")]),_._v(" "),n("p",[_._v("2、这四个寄存器可以单个出现也可以以[by+zi]形式出现，其中y=x或p，z = s或d ，其他格式均为错误的。")]),_._v(" "),n("p",[_._v("3、当使用bp时，如果没有显性地给出段地址，则段地址默认在ss段寄存器中。")]),_._v(" "),n("p",[_._v("4、汇编语言中用三个概念来表达数据的位置：")]),_._v(" "),n("p",[n("strong",[_._v("立即数（idata）：")])]),_._v(" "),n("blockquote",[_._v("\n  直接包含在机器指令中的【数据】（执行前在CPU的【指令缓冲器中】），在汇编指令中直接给出\n")]),_._v(" "),n("p",[n("strong",[_._v("寄存器")])]),_._v(" "),n("blockquote",[_._v("\n  指令要处理的【数据】在【寄存器】中，在汇编指令中给出相应寄存器名\n")]),_._v(" "),n("p",[n("strong",[_._v("段地址和偏移地址")])]),_._v(" "),n("blockquote",[_._v("\n  指令要处理的【数据】在【内存】中，段地址在某个段寄存器中，偏移地址通过[X]给出\n")]),_._v(" "),n("p",[_._v("5、当数据在内存中时，有多重寻址方式，一般都是在[…]里给出偏移地址，偏移地址可以是第1条所述四个寄存器中的单个的寄存器，也可以是这四个寄存器中的某个或某两个寄存器与立即数的组合。")]),_._v(" "),n("p",[_._v("6、指明要处理的数据的尺寸的方式：")]),_._v(" "),n("p",[_._v("(1).通过寄存器名称指明，如al代表数据为一个字节，ax为两个字节"),n("br"),_._v("\n(2).用操作符X ptr 指明    内存单元长度， X = word 或 byte"),n("br"),_._v("\n(3).push指令只进行字操作")]),_._v(" "),n("p",[_._v("7、div在汇编中为除法指令")]),_._v(" "),n("blockquote",[_._v("\n  除数有8位和16位两种，存放于寄存器或内存中，如果除数为8位，被除数在AX中，AL存储除法操作的商，AH存放余数；如果除数为16位，则被除数的低16位存在AX中，高16位存在DX中，商存在AX中，余数存在DX中。\n")]),_._v(" "),n("p",[_._v("8、db定义【字节型】数据，dw定义【字型】数据，dd定义【双字型】数据")]),_._v(" "),n("p",[_._v("9、dup操作符与db、dd、dw配合使用进行数据的重复")])])}],!1,null,null,null);p.options.__file="2016-05-31-汇编语言学习笔记（8）——数据处理的基本问题.md";v.default=p.exports}}]);